{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "df=pd.read_csv(\"F:\\Mtech\\WQI\\May20.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>May</th>\n",
       "      <th>Location</th>\n",
       "      <th>pH</th>\n",
       "      <th>COD</th>\n",
       "      <th>BOD</th>\n",
       "      <th>DO</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Palla</td>\n",
       "      <td>7.2</td>\n",
       "      <td>10</td>\n",
       "      <td>1.4</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Surghat</td>\n",
       "      <td>7.6</td>\n",
       "      <td>12</td>\n",
       "      <td>2.1</td>\n",
       "      <td>4.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Khajoori Paltoon Pool</td>\n",
       "      <td>7.2</td>\n",
       "      <td>42</td>\n",
       "      <td>1.8</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Kudesia Ghat</td>\n",
       "      <td>7.4</td>\n",
       "      <td>52</td>\n",
       "      <td>1.2</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>NaN</td>\n",
       "      <td>ITO Bridge</td>\n",
       "      <td>7.1</td>\n",
       "      <td>46</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Nizamudin Bridge</td>\n",
       "      <td>7.2</td>\n",
       "      <td>68</td>\n",
       "      <td>2.2</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Agra Canal (Okhla)</td>\n",
       "      <td>7.1</td>\n",
       "      <td>78</td>\n",
       "      <td>1.6</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Downstream Okhla Barage</td>\n",
       "      <td>7.8</td>\n",
       "      <td>78</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Agra Canal (Jaitpur)</td>\n",
       "      <td>7.8</td>\n",
       "      <td>58</td>\n",
       "      <td>2.1</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   May                 Location   pH  COD  BOD   DO\n",
       "0  NaN                    Palla  7.2   10  1.4  7.0\n",
       "1  NaN                  Surghat  7.6   12  2.1  4.3\n",
       "2  NaN    Khajoori Paltoon Pool  7.2   42  1.8  0.0\n",
       "3  NaN             Kudesia Ghat  7.4   52  1.2  0.0\n",
       "4  NaN               ITO Bridge  7.1   46  2.0  0.0\n",
       "5  NaN         Nizamudin Bridge  7.2   68  2.2  0.0\n",
       "6  NaN       Agra Canal (Okhla)  7.1   78  1.6  0.0\n",
       "7  NaN  Downstream Okhla Barage  7.8   78  2.0  0.0\n",
       "8  NaN     Agra Canal (Jaitpur)  7.8   58  2.1  0.0"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(9, 6)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<bound method NDFrame.describe of    May                 Location   pH  COD  BOD   DO\n",
       "0  NaN                    Palla  7.2   10  1.4  7.0\n",
       "1  NaN                  Surghat  7.6   12  2.1  4.3\n",
       "2  NaN    Khajoori Paltoon Pool  7.2   42  1.8  0.0\n",
       "3  NaN             Kudesia Ghat  7.4   52  1.2  0.0\n",
       "4  NaN               ITO Bridge  7.1   46  2.0  0.0\n",
       "5  NaN         Nizamudin Bridge  7.2   68  2.2  0.0\n",
       "6  NaN       Agra Canal (Okhla)  7.1   78  1.6  0.0\n",
       "7  NaN  Downstream Okhla Barage  7.8   78  2.0  0.0\n",
       "8  NaN     Agra Canal (Jaitpur)  7.8   58  2.1  0.0>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x298fa05a8c8>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df.groupby(['Location']).count()['pH'].plot(kind='bar',figsize=(10,7))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "def exmp (c,w,s):\n",
    "    relw=w/12\n",
    "    wqi= relw*(c/s)*100\n",
    "    return wqi\n",
    "x=exmp (df.pH,1,8.5)\n",
    "df['sub_index_pH']=x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>May</th>\n",
       "      <th>Location</th>\n",
       "      <th>pH</th>\n",
       "      <th>COD</th>\n",
       "      <th>BOD</th>\n",
       "      <th>DO</th>\n",
       "      <th>sub_index_pH</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Palla</td>\n",
       "      <td>7.2</td>\n",
       "      <td>10</td>\n",
       "      <td>1.4</td>\n",
       "      <td>7.0</td>\n",
       "      <td>7.058824</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Surghat</td>\n",
       "      <td>7.6</td>\n",
       "      <td>12</td>\n",
       "      <td>2.1</td>\n",
       "      <td>4.3</td>\n",
       "      <td>7.450980</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Khajoori Paltoon Pool</td>\n",
       "      <td>7.2</td>\n",
       "      <td>42</td>\n",
       "      <td>1.8</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.058824</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Kudesia Ghat</td>\n",
       "      <td>7.4</td>\n",
       "      <td>52</td>\n",
       "      <td>1.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.254902</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>NaN</td>\n",
       "      <td>ITO Bridge</td>\n",
       "      <td>7.1</td>\n",
       "      <td>46</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.960784</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Nizamudin Bridge</td>\n",
       "      <td>7.2</td>\n",
       "      <td>68</td>\n",
       "      <td>2.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.058824</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Agra Canal (Okhla)</td>\n",
       "      <td>7.1</td>\n",
       "      <td>78</td>\n",
       "      <td>1.6</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.960784</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Downstream Okhla Barage</td>\n",
       "      <td>7.8</td>\n",
       "      <td>78</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.647059</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Agra Canal (Jaitpur)</td>\n",
       "      <td>7.8</td>\n",
       "      <td>58</td>\n",
       "      <td>2.1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.647059</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   May                 Location   pH  COD  BOD   DO  sub_index_pH\n",
       "0  NaN                    Palla  7.2   10  1.4  7.0      7.058824\n",
       "1  NaN                  Surghat  7.6   12  2.1  4.3      7.450980\n",
       "2  NaN    Khajoori Paltoon Pool  7.2   42  1.8  0.0      7.058824\n",
       "3  NaN             Kudesia Ghat  7.4   52  1.2  0.0      7.254902\n",
       "4  NaN               ITO Bridge  7.1   46  2.0  0.0      6.960784\n",
       "5  NaN         Nizamudin Bridge  7.2   68  2.2  0.0      7.058824\n",
       "6  NaN       Agra Canal (Okhla)  7.1   78  1.6  0.0      6.960784\n",
       "7  NaN  Downstream Okhla Barage  7.8   78  2.0  0.0      7.647059\n",
       "8  NaN     Agra Canal (Jaitpur)  7.8   58  2.1  0.0      7.647059"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "def exmp (c,w,s):\n",
    "    relw=w/12\n",
    "    wqi= relw*(c/s)*100\n",
    "    return wqi\n",
    "x=exmp (df.COD,5,10)\n",
    "df['sub_index_COD']=x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>May</th>\n",
       "      <th>Location</th>\n",
       "      <th>pH</th>\n",
       "      <th>COD</th>\n",
       "      <th>BOD</th>\n",
       "      <th>DO</th>\n",
       "      <th>sub_index_pH</th>\n",
       "      <th>sub_index_COD</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Palla</td>\n",
       "      <td>7.2</td>\n",
       "      <td>10</td>\n",
       "      <td>1.4</td>\n",
       "      <td>7.0</td>\n",
       "      <td>7.058824</td>\n",
       "      <td>41.666667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Surghat</td>\n",
       "      <td>7.6</td>\n",
       "      <td>12</td>\n",
       "      <td>2.1</td>\n",
       "      <td>4.3</td>\n",
       "      <td>7.450980</td>\n",
       "      <td>50.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Khajoori Paltoon Pool</td>\n",
       "      <td>7.2</td>\n",
       "      <td>42</td>\n",
       "      <td>1.8</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.058824</td>\n",
       "      <td>175.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Kudesia Ghat</td>\n",
       "      <td>7.4</td>\n",
       "      <td>52</td>\n",
       "      <td>1.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.254902</td>\n",
       "      <td>216.666667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>NaN</td>\n",
       "      <td>ITO Bridge</td>\n",
       "      <td>7.1</td>\n",
       "      <td>46</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.960784</td>\n",
       "      <td>191.666667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Nizamudin Bridge</td>\n",
       "      <td>7.2</td>\n",
       "      <td>68</td>\n",
       "      <td>2.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.058824</td>\n",
       "      <td>283.333333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Agra Canal (Okhla)</td>\n",
       "      <td>7.1</td>\n",
       "      <td>78</td>\n",
       "      <td>1.6</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.960784</td>\n",
       "      <td>325.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Downstream Okhla Barage</td>\n",
       "      <td>7.8</td>\n",
       "      <td>78</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.647059</td>\n",
       "      <td>325.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Agra Canal (Jaitpur)</td>\n",
       "      <td>7.8</td>\n",
       "      <td>58</td>\n",
       "      <td>2.1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.647059</td>\n",
       "      <td>241.666667</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   May                 Location   pH  COD  BOD   DO  sub_index_pH  \\\n",
       "0  NaN                    Palla  7.2   10  1.4  7.0      7.058824   \n",
       "1  NaN                  Surghat  7.6   12  2.1  4.3      7.450980   \n",
       "2  NaN    Khajoori Paltoon Pool  7.2   42  1.8  0.0      7.058824   \n",
       "3  NaN             Kudesia Ghat  7.4   52  1.2  0.0      7.254902   \n",
       "4  NaN               ITO Bridge  7.1   46  2.0  0.0      6.960784   \n",
       "5  NaN         Nizamudin Bridge  7.2   68  2.2  0.0      7.058824   \n",
       "6  NaN       Agra Canal (Okhla)  7.1   78  1.6  0.0      6.960784   \n",
       "7  NaN  Downstream Okhla Barage  7.8   78  2.0  0.0      7.647059   \n",
       "8  NaN     Agra Canal (Jaitpur)  7.8   58  2.1  0.0      7.647059   \n",
       "\n",
       "   sub_index_COD  \n",
       "0      41.666667  \n",
       "1      50.000000  \n",
       "2     175.000000  \n",
       "3     216.666667  \n",
       "4     191.666667  \n",
       "5     283.333333  \n",
       "6     325.000000  \n",
       "7     325.000000  \n",
       "8     241.666667  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "def exmp (c,w,s):\n",
    "    relw=w/12\n",
    "    wqi= relw*(c/s)*100\n",
    "    return wqi\n",
    "x=exmp (df.BOD,2,3)\n",
    "df['sub_index_BOD']=x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>May</th>\n",
       "      <th>Location</th>\n",
       "      <th>pH</th>\n",
       "      <th>COD</th>\n",
       "      <th>BOD</th>\n",
       "      <th>DO</th>\n",
       "      <th>sub_index_pH</th>\n",
       "      <th>sub_index_COD</th>\n",
       "      <th>sub_index_BOD</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Palla</td>\n",
       "      <td>7.2</td>\n",
       "      <td>10</td>\n",
       "      <td>1.4</td>\n",
       "      <td>7.0</td>\n",
       "      <td>7.058824</td>\n",
       "      <td>41.666667</td>\n",
       "      <td>7.777778</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Surghat</td>\n",
       "      <td>7.6</td>\n",
       "      <td>12</td>\n",
       "      <td>2.1</td>\n",
       "      <td>4.3</td>\n",
       "      <td>7.450980</td>\n",
       "      <td>50.000000</td>\n",
       "      <td>11.666667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Khajoori Paltoon Pool</td>\n",
       "      <td>7.2</td>\n",
       "      <td>42</td>\n",
       "      <td>1.8</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.058824</td>\n",
       "      <td>175.000000</td>\n",
       "      <td>10.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Kudesia Ghat</td>\n",
       "      <td>7.4</td>\n",
       "      <td>52</td>\n",
       "      <td>1.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.254902</td>\n",
       "      <td>216.666667</td>\n",
       "      <td>6.666667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>NaN</td>\n",
       "      <td>ITO Bridge</td>\n",
       "      <td>7.1</td>\n",
       "      <td>46</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.960784</td>\n",
       "      <td>191.666667</td>\n",
       "      <td>11.111111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Nizamudin Bridge</td>\n",
       "      <td>7.2</td>\n",
       "      <td>68</td>\n",
       "      <td>2.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.058824</td>\n",
       "      <td>283.333333</td>\n",
       "      <td>12.222222</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Agra Canal (Okhla)</td>\n",
       "      <td>7.1</td>\n",
       "      <td>78</td>\n",
       "      <td>1.6</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.960784</td>\n",
       "      <td>325.000000</td>\n",
       "      <td>8.888889</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Downstream Okhla Barage</td>\n",
       "      <td>7.8</td>\n",
       "      <td>78</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.647059</td>\n",
       "      <td>325.000000</td>\n",
       "      <td>11.111111</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Agra Canal (Jaitpur)</td>\n",
       "      <td>7.8</td>\n",
       "      <td>58</td>\n",
       "      <td>2.1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.647059</td>\n",
       "      <td>241.666667</td>\n",
       "      <td>11.666667</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   May                 Location   pH  COD  BOD   DO  sub_index_pH  \\\n",
       "0  NaN                    Palla  7.2   10  1.4  7.0      7.058824   \n",
       "1  NaN                  Surghat  7.6   12  2.1  4.3      7.450980   \n",
       "2  NaN    Khajoori Paltoon Pool  7.2   42  1.8  0.0      7.058824   \n",
       "3  NaN             Kudesia Ghat  7.4   52  1.2  0.0      7.254902   \n",
       "4  NaN               ITO Bridge  7.1   46  2.0  0.0      6.960784   \n",
       "5  NaN         Nizamudin Bridge  7.2   68  2.2  0.0      7.058824   \n",
       "6  NaN       Agra Canal (Okhla)  7.1   78  1.6  0.0      6.960784   \n",
       "7  NaN  Downstream Okhla Barage  7.8   78  2.0  0.0      7.647059   \n",
       "8  NaN     Agra Canal (Jaitpur)  7.8   58  2.1  0.0      7.647059   \n",
       "\n",
       "   sub_index_COD  sub_index_BOD  \n",
       "0      41.666667       7.777778  \n",
       "1      50.000000      11.666667  \n",
       "2     175.000000      10.000000  \n",
       "3     216.666667       6.666667  \n",
       "4     191.666667      11.111111  \n",
       "5     283.333333      12.222222  \n",
       "6     325.000000       8.888889  \n",
       "7     325.000000      11.111111  \n",
       "8     241.666667      11.666667  "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "def exmp (c,w,s):\n",
    "    relw=w/12\n",
    "    wqi= relw*(c/s)*100\n",
    "    return wqi\n",
    "x=exmp (df.DO,4,5)\n",
    "df['sub_index_DO']=x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>May</th>\n",
       "      <th>Location</th>\n",
       "      <th>pH</th>\n",
       "      <th>COD</th>\n",
       "      <th>BOD</th>\n",
       "      <th>DO</th>\n",
       "      <th>sub_index_pH</th>\n",
       "      <th>sub_index_COD</th>\n",
       "      <th>sub_index_BOD</th>\n",
       "      <th>sub_index_DO</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Palla</td>\n",
       "      <td>7.2</td>\n",
       "      <td>10</td>\n",
       "      <td>1.4</td>\n",
       "      <td>7.0</td>\n",
       "      <td>7.058824</td>\n",
       "      <td>41.666667</td>\n",
       "      <td>7.777778</td>\n",
       "      <td>46.666667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Surghat</td>\n",
       "      <td>7.6</td>\n",
       "      <td>12</td>\n",
       "      <td>2.1</td>\n",
       "      <td>4.3</td>\n",
       "      <td>7.450980</td>\n",
       "      <td>50.000000</td>\n",
       "      <td>11.666667</td>\n",
       "      <td>28.666667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Khajoori Paltoon Pool</td>\n",
       "      <td>7.2</td>\n",
       "      <td>42</td>\n",
       "      <td>1.8</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.058824</td>\n",
       "      <td>175.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Kudesia Ghat</td>\n",
       "      <td>7.4</td>\n",
       "      <td>52</td>\n",
       "      <td>1.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.254902</td>\n",
       "      <td>216.666667</td>\n",
       "      <td>6.666667</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>NaN</td>\n",
       "      <td>ITO Bridge</td>\n",
       "      <td>7.1</td>\n",
       "      <td>46</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.960784</td>\n",
       "      <td>191.666667</td>\n",
       "      <td>11.111111</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Nizamudin Bridge</td>\n",
       "      <td>7.2</td>\n",
       "      <td>68</td>\n",
       "      <td>2.2</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.058824</td>\n",
       "      <td>283.333333</td>\n",
       "      <td>12.222222</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Agra Canal (Okhla)</td>\n",
       "      <td>7.1</td>\n",
       "      <td>78</td>\n",
       "      <td>1.6</td>\n",
       "      <td>0.0</td>\n",
       "      <td>6.960784</td>\n",
       "      <td>325.000000</td>\n",
       "      <td>8.888889</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Downstream Okhla Barage</td>\n",
       "      <td>7.8</td>\n",
       "      <td>78</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.647059</td>\n",
       "      <td>325.000000</td>\n",
       "      <td>11.111111</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>NaN</td>\n",
       "      <td>Agra Canal (Jaitpur)</td>\n",
       "      <td>7.8</td>\n",
       "      <td>58</td>\n",
       "      <td>2.1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>7.647059</td>\n",
       "      <td>241.666667</td>\n",
       "      <td>11.666667</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   May                 Location   pH  COD  BOD   DO  sub_index_pH  \\\n",
       "0  NaN                    Palla  7.2   10  1.4  7.0      7.058824   \n",
       "1  NaN                  Surghat  7.6   12  2.1  4.3      7.450980   \n",
       "2  NaN    Khajoori Paltoon Pool  7.2   42  1.8  0.0      7.058824   \n",
       "3  NaN             Kudesia Ghat  7.4   52  1.2  0.0      7.254902   \n",
       "4  NaN               ITO Bridge  7.1   46  2.0  0.0      6.960784   \n",
       "5  NaN         Nizamudin Bridge  7.2   68  2.2  0.0      7.058824   \n",
       "6  NaN       Agra Canal (Okhla)  7.1   78  1.6  0.0      6.960784   \n",
       "7  NaN  Downstream Okhla Barage  7.8   78  2.0  0.0      7.647059   \n",
       "8  NaN     Agra Canal (Jaitpur)  7.8   58  2.1  0.0      7.647059   \n",
       "\n",
       "   sub_index_COD  sub_index_BOD  sub_index_DO  \n",
       "0      41.666667       7.777778     46.666667  \n",
       "1      50.000000      11.666667     28.666667  \n",
       "2     175.000000      10.000000      0.000000  \n",
       "3     216.666667       6.666667      0.000000  \n",
       "4     191.666667      11.111111      0.000000  \n",
       "5     283.333333      12.222222      0.000000  \n",
       "6     325.000000       8.888889      0.000000  \n",
       "7     325.000000      11.111111      0.000000  \n",
       "8     241.666667      11.666667      0.000000  "
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    103.169935\n",
       "1     97.784314\n",
       "2    192.058824\n",
       "3    230.588235\n",
       "4    209.738562\n",
       "5    302.614379\n",
       "6    340.849673\n",
       "7    343.758170\n",
       "8    260.980392\n",
       "dtype: float64"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "z=df.iloc[:,6:]\n",
    "z\n",
    "c=z.sum(axis=1)\n",
    "c"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "z['final index']=c\n",
    "z\n",
    "z.to_csv('May_20_WQI.csv')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
